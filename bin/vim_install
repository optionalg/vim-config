#!/usr/bin/env ruby

require 'fileutils'

$root_repo_dir = File.absolute_path(File.dirname(__FILE__)) + '/..'
$home          = Dir.home
$backup_dir    = "#{$root_repo_dir}/backups"

# Backup a file or directory to the vim-config backup path.
#
# This function will detect whether a file or directory is being backed up and
# copy it over appropriately. The backup will be timestamped and stored in the
# backups/ directory of this repo.
def backup path
    basename    = File.basename path
    backup_path = "#{$backup_dir}/#{basename}-#{Time.now.to_i}"

    puts "Backing up #{path} to #{backup_path}..."
    if Dir.exists? path
        FileUtils.cp_r path, backup_path, verbose: true
    elsif File.exists? path
        FileUtils.cp path, backup_path, verbose: true
    else
        raise "Path #{path} is not vaid."
    end
    puts "Done backup of #{path}."
end

# Backup a file or directory and remove the original once the backup is
# complete.
def backup_and_remove path
    backup path
    puts "Removing #{path}..."
    FileUtils.rm_rf path
    puts "Done removing #{path}."
end

if Dir.exists? "#{$home}/.vim"
    backup_and_remove "#{$home}/.vim"
end

if File.exists? "#{$home}/.vimrc"
    backup_and_remove "#{$home}/.vimrc"
end

puts 'Creating new symlink to .vim directory...'
FileUtils.symlink "#{$root_repo_dir}/.vim", "#{$home}/.vim", verbose: true
puts 'Done creating .vim symlink.'

puts 'Creating new symlink to .vimrc file...'
FileUtils.symlink "#{$root_repo_dir}/.vimrc", "#{$home}/.vimrc", verbose: true
puts 'Done creating .vimrc symlink.'
